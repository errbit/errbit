- content_for :page_title, problem.message
- content_for :title_css_class, "err_show #{'resolved' if problem.resolved?}"
- content_for :title, problem.error_class || truncate(problem.message, :length => 32)
- content_for :meta do
  %strong App:
  = link_to app.name, app
  %strong Where:
  = problem.where
  %br
  %strong Environment:
  = problem.environment
  %strong Last Notice:
  = problem.last_notice_at.to_s(:precise)
- content_for :action_bar do
  - if problem.unresolved?
    %span
      = link_to([:resolve, app, problem], :method => :put,
        :data => { :confirm => problem_confirm('resolve_one') }, :class => 'resolve btn btn-default') do
        %i.fa.fa-thumbs-o-up
        Resolve
  - if current_user.authentication_token
    %span
      = link_to polymorphic_path([app, problem], :format => "ics", :auth_token => current_user.authentication_token), class: 'btn btn-default' do
        %i.fa.fa-calendar
        iCal
  %span
    = link_to (request.env['HTTP_REFERER'] ? :back : app_problems_path(app)), :class => 'up btn btn-default' do
      %i.fa.fa-chevron-left
      = t('.up')
  %br
  = render "issue_tracker_links"

- content_for :comments do
  %h3 Comments
  %ul.comments
    - problem.comments.each do |comment|
      %li
        - if comment.user
          - if Errbit::Config.use_gravatar
            = link_to comment.user do
              = gravatar_tag comment.user.email, :s => 32
        .comment-header
          - if comment.user
            %span.comment-who
              = link_to comment.user.name, comment.user, class: 'text-muted'
          - else
            %span.comment-who.text-muted
              Unknown User
          %span.comment-when{ title: comment.created_at.to_s(:precise) }
            = time_ago_in_words(comment.created_at, include_seconds: true) << " ago"
          %span.delete
            = link_to [app, problem, comment], :method => :delete,
              :data => { :confirm => t("comments.confirm_delete") }, :class => "destroy-comment" do
              %i.fa.fa-remove
        .comment-body
          = simple_format comment.body

  = form_for [app, problem, @comment] do |comment_form|
    .form-group.add-comment
      = comment_form.label :body, t('.add_a_comment')
      = comment_form.text_area :body, class: 'form-control', rows: 3
      .buttons
        = comment_form.submit "Save Comment", class: 'btn btn-default'

%h4.message= @notice.try(:message)

= paginate @notices, :param_name => :notice, :theme => :notices

%div
  %ul.nav.nav-tabs{ role: 'tablist' }
    %li.active= link_to 'Summary', '#summary', :rel => 'summary', data: { toggle: 'tab' }
    %li= link_to 'Backtrace', '#backtrace', :rel => 'backtrace', data: { toggle: 'tab' }
    - if @notice && @notice.user_attributes.present?
      %li= link_to 'User', '#user_attributes', :rel => 'user_attributes', data: { toggle: 'tab' }
    %li= link_to 'Environment', '#environment', :rel => 'environment', data: { toggle: 'tab' }
    %li= link_to 'Parameters', '#params', :rel => 'params', data: { toggle: 'tab' }
    %li= link_to 'Session', '#session', :rel => 'session', data: { toggle: 'tab' }

- if @notice
  .tab-content
    #summary.tab-pane.active
      -# %h3 Summary
      = render 'notices/summary', :notice => @notice
    #backtrace.tab-pane
      -# %h3 Backtrace
      = render 'notices/backtrace', :backtrace => @notice.backtrace
    - if @notice.user_attributes.present?
      #user_attributes.tab-pane
        -# %h3 User
        = render 'notices/user_attributes', :user => @notice.user_attributes
    #environment.tab-pane
      -# %h3 Environment
      = render 'notices/environment', :notice => @notice
    #params.tab-pane
      -# %h3 Parameters
      = render 'notices/params', :notice => @notice
    #session.tab-pane
      -# %h3 Session
      = render 'notices/session', :notice => @notice
